<?php

declare(strict_types=1);

/**
 * @file
 * Functions to support theming in the OSULP theme.
 */

/**
 * Implements hook_preprocess_HOOK() for all templates.
 */
function osulp_preprocess(array &$variables): void {
  $node = \Drupal::routeMatch()->getParameter('node');
  $group = \Drupal::routeMatch()->getParameter('group');
  if ($node) {
    // add the node to twig variables
    $variables['page_node'] = $node;
    $variables['groups'] = getGroupsByEntity($node);
  } else if ($group) {
    $variables['groups'] = [$group];
  }
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function osulp_preprocess_html(array &$variables): void {
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function osulp_preprocess_page(array &$variables): void {
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function osulp_preprocess_node(array &$variables): void {
  // $uid = \Drupal::currentUser()->id();
  // $author_id = $variables['node']->getOwner()->id();
  // $variables['is_author'] = $author_id == $uid;
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function osulp_preprocess_block(array &$variables): void {
  // Do libcal hours stuff if this is an hours block
  if (isset($variables['bundle']) && $variables['bundle'] == 'hours') {
    $group = strtolower($variables['content']['field_library'][0]['#title']);

    // Add LibCal location hours data to template variables
    $variables['libcal_data'] = libcal_location_data();
    $variables['hours'] = format_this_weeks_dates($variables['libcal_data'][$group][0]['dates']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 */
function osulp_preprocess_field(array &$variables): void {
  // $uid = \Drupal::currentUser()->id();
  // $author_id = $variables['element']['#object']->getOwner()->id();
  // $variables['is_author'] = $author_id == $uid;
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function osulp_preprocess_form__views_exposed_form(array &$variables): void {
  if ($variables['attributes']['action'] == '/news') {
    $variables['attributes']['class'] = array_merge($variables['attributes']['class'], [
      'pt-4',
      'border-top',
    ]);
  }
}

/**
 * Prepares variables views-style-views-organization-chart.html.twig template.
 * This is to remove people from the org chart. Specifically Kerri & AMD since they're final parents to all departments
 */
function osulp_preprocess_views_style_views_organization_chart(&$variables): void {
  $view = $variables['view'];
  $chartId = $variables['chart_id'];
  $amd_id = 31;
  $kerri_id = 53;

  # Find if Kerri or AMD is in the result set. If so, we need to skip removing them from the render set
  $amd = array_search($amd_id, array_column($variables['view']->element['#attached']['drupalSettings'][$chartId]['nodes'], 'id'));
  $kerri = array_search($kerri_id, array_column($variables['view']->element['#attached']['drupalSettings'][$chartId]['nodes'], 'id'));
  # Loop through render data and remove Kerri/AMD if necessary
  foreach($variables['view']->element['#attached']['drupalSettings'][$chartId]['data'] as $key => $user_pair) {
    # Remove Kerri/AMD unless they were in the result set
    if (($user_pair[0] == $amd_id && !$amd)
         || ($user_pair[0] == $kerri_id && !$kerri)) {
      unset($variables['view']->element['#attached']['drupalSettings'][$chartId]['data'][$key]);
    }
  }

  # Reset the key ordering of the render set
  $variables['view']->element['#attached']['drupalSettings'][$chartId]['data'] = array_values($variables['view']->element['#attached']['drupalSettings'][$chartId]['data']);
}

/**
 * Implements hook_preprocess_HOOK() for regions.
 */
function osulp_preprocess_region(array &$variables): void {
  // check for title block image and set uri as twig variable if it exists
  if (isset($variables['page_node']) && $variables['page_node'] && $variables['page_node']->field_page_image[0] ) {
    $variables['image_uri'] = $variables['page_node']->field_page_image[0]->entity->field_media_image->entity->createFileUrl();
  } else if ($variables['groups'][0] && $variables['groups'][0]->field_hero_image[0]) {
    $variables['image_uri'] = $variables['groups'][0]->field_hero_image[0]->entity->field_media_image->entity->createFileUrl();
  }
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
}

/**
 * Retrieve all group module Group Entity an entity is in
 */
function getGroupsByEntity($entity): array {
  $groups = array();
  if (!$entity) return $groups;

  $relations = \Drupal\group\Entity\GroupRelationship::loadByEntity($entity);

  foreach ($relations as $rel) {
    if ($rel->getEntity()->getEntityTypeId() == 'node') {
      $groups[] = $rel->getGroup();
    }
  }

  return $groups;
}

/**
 * Fetch LibCal hours data for all locations from cache or source
 *
 * @return array Array JSON of objects for LibCal location hours data
 */
function libcal_location_data(): array {
  // LIBCAL_LOCATIONS is a list of library location ids as json. eg:
  // [
  //  {
  //   1234 => 'valley',
  //   5678 => 'guin',
  //   9012 => 'cascades',
  //  }
  // ]
  // This takes just the interior hash
  $libcal_location_ids = json_decode(getenv('LIBCAL_LOCATIONS'), true)[0];

  // returned valley, cascades, and guin data
  $data = [];
  // Invalidate every 6 hours
  // Now + 60 seconds * 60 minutes * 6 hours
  $invalid_time = time() + 60 * 60 * 6;
  // Shared instance of the Drupal Cache
  $cache = \Drupal::cache();

  // Iterate locations and retrieve/cache LibCal data
  foreach ($libcal_location_ids as $loc_id => $group) {
    $cid = "osulp_libcal_$loc_id";

    // Check Drupal cache for this location's data
    if ($cache_data = $cache->get($cid)) {
        $data[$group] = $cache_data->data;
    } else { // Else retreive from LibCal source
        // HTTP Client with pre-filled LibCal bearer token. Either an existing one or a new instance
        $client = $client ?? authorized_libcal_client($cache);

        // Fetch remote data and cache for later
        $data[$group] = fetch_libcal_data($client, $loc_id);
        $cache->set($cid, $data[$group], $invalid_time);
    }
  }

  return $data;
}

/**
 * Create a \GuzzleHttp\Client with a valid LibCal bearer token
 *
 * @param \Drupal::cache Current Drupal Cache object
 * @return \GuzzleHttp\Client Client with bearer token
 */
function authorized_libcal_client($cache): \GuzzleHttp\Client {
  // Check Drupal cache for an active token
  if ($cache_data = $cache->get('libcal_access_token')) {
    $access_token = $cache_data->data;
  } else { // Else retreive token from LibCal
    $access_token = libcal_bearer_token();
    // Expire after 3400 seconds
    // LibCal tokens are valid for 3600 seconds so lets leave some wiggle room
    $cache->set('libcal_access_token', $access_token, time() + 3400);
  }

  return new \GuzzleHttp\Client([
    'headers' => [
      'Authorization' => "Bearer $access_token",
    ],
  ]);
}

/**
 * Fetch from source the LibCal hours data for a location ID
 *
 * @param \GuzzleHttp\Client Client with bearer token
 * @param integer Location ID
 * @return array JSON of libcal location hours data
 */
function fetch_libcal_data($client, $location_id): array {
  // Start of last week
  $start_time = new DateTime('midnight last week - 1 day');
  $start_time = $start_time->format('Y-m-d');
  // End of next week
  $end_time = new DateTime('midnight next week + 5 days');
  $end_time = $end_time->format('Y-m-d');

  // Retrieve data for $location_id (LibCal ID for Library), for time period $start_time - $end_time
  $response = $client->get("https://oregonstate.libcal.com/api/1.1/hours/$location_id?from=$start_time&to=$end_time");
  $result = json_decode((string)$response->getBody(), TRUE);

  return $result;
}

/**
 * Retrieve new LibCal bearer token
 *
 * @return string New libcal bearer token
 */
function libcal_bearer_token(): string {
  $client = \Drupal::httpClient();
  $response = $client->post("https://oregonstate.libcal.com/api/1.1/oauth/token",[
    'form_params' => [
      'client_id' => getenv('LIBCAL_CLIENT_ID'),
      'client_secret' => getenv('LIBCAL_CLIENT_SECRET'),
      'grant_type' => 'client_credentials',
    ],
  ]);
  $result = json_decode((string) $response->getBody());

  return $result->access_token;
}


/**
 * Narrow libcal data to this week and format data for use in twig
 *
 * @param Array JSON of libcal location hours data
 *
 * @return Array Well formatted libcal data
 */
function format_this_weeks_dates($libcal_dates): array {
  if (!isset($libcal_dates)) {
    return [];
  }

  $dates = [];
  $today = date('Y-m-d');
  // End of last week. We'll be adding 1 day to this seven times to get this week's data
  $start_time = new DateTime('midnight this week - 2 day');

  // Get the date and day of the week for each day of this week
  for ($i = 0; $i < 7; ++$i) {
    // Add a day to get to the next day in the week
    $start_time->modify("+1 days");
    $date = $start_time->format('Y-m-d');

    if (isset($libcal_dates[$date]['hours'])) {
      // From and to time for this day
      $from = $libcal_dates[$date]['hours'][0]['from'];
      $to = $libcal_dates[$date]['hours'][0]['to'];
      // Convert that to unix timestamp
      $from_unix = strtotime($from);
      $to_unix = strtotime($to);
      // If the closing hour is less than the opening hour, it actually closes the next day
      if ($to_unix < $from_unix) $to_unix = strtotime("$to + 1 day");
      // Structure the open/close hours for <time> datetime attribute
      $from_structured = date('Y-m-d H:i', $from_unix);
      $to_structured = date('Y-m-d H:i', $to_unix);
      // Wrap it all together for a twig variable
      $dates[$date] = [
        'from' => $from,
        'from_structured' => $from_structured,
        'to' => $to,
        'to_structured' => $to_structured,
      ];
    } else { // If the hours is an exception, just get the 'note' from the exception, or default to 'Closed'
      $dates[$date] = [
        'message' => $libcal_dates[$date]['note'] ?: 'Closed',
      ];
    }
    // Add some consistent information
    $dates[$date]['day'] = $start_time->format('l');
    $dates[$date]['status'] = $libcal_dates[$date]['status'];
  }
  // Add today's info as a unique element
  array_unshift($dates, $dates[$today]);

  return $dates;
}